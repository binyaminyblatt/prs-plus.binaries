static name_token command_help[] = {
  { UP_SILENTLY, "Select the parent of the selected frame silently.\nAn argument specifies how many frames up to go." },
  { SET, "Evaluate an expression without printing its value." },
  { BACKTRACE, "Display the parent functions of the current frame.\nAn argument specifies how many frames back to show.\nIf the argument is negative, start from the first frame instead of the current." },
  { BREAK, "Set a breakpoint.\nAn 'if' clause specifies a condition." },
  { RECORDOFF, "Stop recording a script." },
  { RECORDON, "Start recording a script." },
  { DOWN_SILENTLY, "Silently select the child of the selected frame.\nAn argument specifies how many frames down to go." },
  { COPYING, "Show licensing information." },
  { COND, "Set a condition for an existing breakpoint." },
  { STEP, "Step through program to a different source line.\nAn argument specifies a repeat count." },
  { REMOVE, "Remove an object from the object tree." },
  { REPLAY, "Replay a recorded script." },
  { DOWN_FRAME, "Select the child of the selected frame.\nAn argument specifies how many frames down to go." },
  { LIST_GLOBALS, "List all global variables and their values.\nWith an argument, list all only those with a specific value." },
  { ENABLE_DISPLAY, "Re-enable an automatic display." },
  { NEXTI, "Step one instruction, stepping over subroutine calls.\nStep a specified number of instructions, stepping over subroutine calls." },
  { UNTIL, "Resume execution until the program reaches a line number greater than the current line." },
  { OBJECT_TREE, "Display the object tree.\nAn argument says which object to use as the root of the tree." },
  { STEPI, "Step exactly one instruction.\nAn argument specifies a repeat count." },
  { WARRANTY, "Show warranty information." },
  { RESTART, "Restart the game." },
  { UNDO, "Undo last move (not last debugger command)." },
  { FRAME, "Show the selected stack frame.\nAn argument specifies a stack frame to show." },
  { SELECT_FRAME, "Select a specific stack frame." },
  { CONT, "Continue execution.\nAn argument sets the ignore count of the current breakpoint." },
  { FINISH, "An argument specifies a repeat count." },
  { GIVE, "Give an object an attribute.\nWith a tilde clears the attribute instead of setting it." },
  { FIND, "Find objects whose shortnames contain a string." },
  { JUMP, "Continue execution at a new location." },
  { LANGUAGE, "Show the current source language." },
  { DUMPMEM, "Dump memory to a file" },
  { UNDISPLAY, "Stop automatically displaying an expression." },
  { DISABLE_BREAK, "Temporarily disable a breakpoint." },
  { RESTORE, "Restore a saved game." },
  { REDO, "Redo undid move.  Only works immediately after an 'undo'." },
  { INFOSOURCES, "List source files." },
  { SYMBOL_FILE, "Load debugging info from a file (usually 'gameinfo.dbg')." },
  { DISPLAY, "Print value of an expression each time the program stops." },
  { NEXT, "Step through program, stepping over subroutine calls.\nAn argument specifies a repeat count." },
  { BREAKPOINTS, "List breakpoints.\nAn argument specifies a specific breakpoint to list." },
  { UNALIAS, "Remove an alias" },
  { HELP, "Print list of commands." },
  { MOVE, "Move an object around the object tree." },
  { DELETE, "Delete a breakpoint." },
  { QUIT, "Exit nitfol." },
  { UP_FRAME, "Select the parent of the selected frame.\nAn argument specifies how many frames up to go." },
  { ALIAS, "Add an alias" },
  { ENABLE_BREAK, "Re-enabled a breakpoint." },
  { AUTOMAP, "Start automapping" },
  { INFOSOURCE, "Get information on the current source file." },
  { REPLAYOFF, "Halt replay." },
  { '#', "Enter a comment" },
  { RALIAS, "Add a recursive alias" },
  { IGNORE, "Set the ignore count for a breakpoint." },
  { PRINT, "Evaluates an expression and prints the result.\nThis can include function calls." },
  { DISABLE_DISPLAY, "Temporarily disable an automatic display." }
};
